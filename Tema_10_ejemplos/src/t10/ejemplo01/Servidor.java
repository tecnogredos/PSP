package t10.ejemplo01;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * Realiza dos tareas:
 *
 * 1.) (Primer plano) Mostrar el texto que envia el servidor 
 * 2.) (Segundo plano)Permanecer escuchando constantemente por el puerto 6666 (usando hilos)
 */
public class Servidor extends javax.swing.JFrame implements Runnable {

    public Servidor() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaField = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textAreaField.setColumns(20);
        textAreaField.setRows(5);
        jScrollPane1.setViewportView(textAreaField);

        jLabel1.setText("SERVIDOR");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(13, 13, 13)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 259, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Servidor.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        Servidor servidor = new Servidor();
        
        //Primer plano - la aplicación
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                servidor.setVisible(true); 
            }
        });
        //Segundo plano - escuchando
        Thread mihilo = new Thread(servidor);
        mihilo.start(); 
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea textAreaField;
    // End of variables declaration//GEN-END:variables

    @Override
    public void run() {
        //escuchando();
    
        try {
            
          
            //Puesto a la escucha
            ServerSocket servidor = new ServerSocket(6666);
            
while(Boolean.TRUE) {//Por siempre
            
            //Aceptamos la comunicación
            Socket misocket = servidor.accept();
            
            //Flujo de entrada
            InputStream aux = misocket.getInputStream();
            DataInputStream flujoEntrada = new DataInputStream(aux);
            
            String mensaje = flujoEntrada.readUTF();
            
            textAreaField.append("\n" + mensaje);
            
            misocket.close();
           
}//fin del while
             
            
            
        } catch (IOException ex) {
            System.out.println(ex.getMessage());
        } 
        

        
        
    }
    private void escuchando() {
        try {
            Thread hiloactual = Thread.currentThread();
            while (!hiloactual.isInterrupted()) {
                Thread.sleep(1000);
                System.out.println("Escuchando ....!");
            }
        } catch (InterruptedException ex) {
            System.out.println(ex.getMessage());
        }
    }
}
